{"version":3,"file":"index.cjs.js","sources":["../src/util/uuid.ts","../src/util/enumerate.ts","../src/util/is-plain-text.ts","../src/whitespace.ts","../src/consts.ts","../src/de.ts","../src/jsx.ts","../src/jsx-runtime.ts","../src/render.ts","../src/se.tsx"],"sourcesContent":["// Copyright 2020 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\nconst r = new Uint8Array(16)\n\nfunction s(start: number, end: number): string {\n    return Array.from(\n        r.subarray(start, end),\n        x => x.toString(16).padStart(2, '0'),\n    ).join('')\n}\n\nexport function v4(): string {\n    window.crypto.getRandomValues(r)\n    r[6] = 0x40 | (r[6] & 0x0f)\n    r[8] = 0x40 | (r[8] & 0x3f)\n    return `${s(0, 4)}-${s(4, 6)}-${s(6, 8)}-${s(8, 10)}-${s(10, 16)}`\n}\n","// Copyright 2020 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\n/** Yield items of an iterable together with their indices */\nexport default function *enumerate<T>(iter: Iterable<T>, reverse?: boolean): Iterable<[number, T]> {\n    if (reverse) {\n        if (Array.isArray(iter)) {\n            for (let index = iter.length - 1 ; index >= 0 ; --index) {\n                yield [index, iter[index]]\n            }\n        } else {\n            yield* enumerate(Array.from(iter), true)\n        }\n        return\n    }\n\n    let index = 0\n\n    for (const value of iter) {\n        yield [index++, value]\n    }\n}\n","// Copyright 2020 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\nimport { StyledText } from 'cnx-designer'\nimport { Element, Node } from 'slate'\n\nconst KNOWN_TEXT_PROPS = ['text', 'emphasis', 'strong', 'position']\n\n/** Check if a node contains only plain, unmarked text */\nexport default function isPlainText(node: Node): boolean {\n    if (Element.isElement(node)) {\n        return node.children.every(isPlainText)\n    }\n\n    if (!Object.keys(node).every(key => KNOWN_TEXT_PROPS.includes(key))) {\n        return false\n    }\n\n    const text = node as StyledText\n\n    return !text.emphasis\n        && !text.strong\n        && (text.position == null || text.position === 'normal')\n}\n","// Copyright 2020 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\nimport { Editor, Element, Node, Path, Point, Text, Transforms } from 'slate'\n\nimport { enumerate, isPlainText } from './util'\n\n/**\n * Normalize white space in a node.\n *\n * White space codepoints in Unicode can be roughly divided into four categories\n * spacing marks, non-breaking spacing marks, zero-width marks, and line breaks.\n *\n * Spacing marks are codepoints used (usually) to separate words. As of Unicode\n * 12.1 those are: U+0009 CHARACTER TABULATION, U+0020 SPACE, U+1680 OGHAM SPACE\n * MARK, U+2000 EN QUAD, U+2001 EM QUAD, U+2002 EN SPACE, U+2003 EM SPACE,\n * U+2004 THREE-PER-EM SPACE, U+2005 FOUR-PER-EM SPACE, U+2006 SIX-PER-EM SPACE,\n * U+2008 PUNCTUATION SPACE, U+2009 THIN SPACE, U+200A HAIR SAPCE, U+205F MEDIUM\n * MATHEMATICAL SPACE, and U+3000 IDEOGRAPHIC SPACE.\n *\n * Non-breaking spacing marks are spacing marks which prevent line breaks from\n * being inserted. As of Unicode 12.1 those are: U+00A0 NO-BREAK SPACE,\n * U+2007 FIGURE SPACE, and U+202F NARROW NO-BREAK SPACE.\n *\n * Zero-width marks are codepoints which themselves do not impact spacing\n * between words (hence zero-width), but affect spacing and rendering in other\n * ways. As of Unicode 12.1 those are: U+180E MONGOLIAN VOWEL SEPARATOR,\n * U+200B ZERO WIDTH SPACE, U+200C ZERO WIDTH NON-JOINER, U+200D ZERO WIDTH\n * JOINER, U+2060 WORD JOINER, and U+FEFF ZERO WIDTH NON-BREAKING SPACE.\n *\n * Line breaks are codepoints which introduce a line break. As of Unicode 12.1\n * those are: U+000A LINE FEED, U+000B LINE TABULATION, U+000C FORM FEED,\n * U+000D CARRAGE RETURN, U+0085 NEXT LINE, U+2028 LINE SEPARATOR, and\n * U+2029 PARAGRAPH SEPARATOR.\n *\n * White space normalization is done in steps:\n *\n * 1.  First all spacing marks and line breaks are changed into U+0020 SPACE,\n *     all non-breaking spacing marks into U+00A0 NO-BREAK SPACE, and U+FEFF\n *     ZERO WIDTH NON-BREAKING SPACE into U+2060 WORD JOINER. The exception to\n *     this are U+1680 OGHAM SPACE MARK and U+3000 IDEOGRAPHIC SPACE which are\n *     left unchanged.\n *\n * 2.  Next, all zero-width marks neighbouring a spacing mark are removed.\n *\n * 3.  Next, sequences consisting of a single white space codepoint are\n *     collapsed into a single codepoint.\n *\n * 4.  Next, all spacing marks neighbouring U+1680 OGHAM SPACE MARK or\n *     U+3000 IDEOGRAPHIC SPACE are removed.\n *\n * 5.  Next, all spacing marks neighbouring a non-breaking spacing mark are\n *     removed.\n *\n * 6.  Next, if there still are sequences of white spaces, only their first code\n *     point is retained.\n *\n * 7.  Finally, white space is stripped from beginning and end of nodes, and\n *     end points of marks and inlines are adjusted so that they don't begin or\n *     end with white spaces.\n *\n * Note that this is a conceptual description, and the actual implementation may\n * differ slightly (for example it performs step 7 first).\n */\nexport default function normalizeWhiteSpace(editor: Editor, at: Path): void {\n    const node = Node.get(editor, at)\n\n    const ends = Editor.isInline(editor, node) ? 'unwrap' : 'trim'\n    normalizeTextBoundaries(editor, { at, ends })\n\n    normalizeSpaces(editor, at)\n}\n\n/**\n * Adjust marks and inlines so that they don't start or end with white space.\n *\n * This function performs the 7th step of white space normalization.\n */\nfunction normalizeTextBoundaries(\n    editor: Editor,\n    options: {\n        at: Path,\n        ends?: 'unwrap' | 'trim',\n    },\n): void {\n    const { at, ends = 'trim' } = options\n    const nodePath = Editor.pathRef(editor, at)\n\n    // Step 1: adjust white space such that no inline element and no marked text\n    // start or end with a white space.\n    for (const [child, path] of Node.children(editor, nodePath.current!, { reverse: true })) {\n        // Recursively normalize nested elements.\n        if (Element.isElement(child)) {\n            // TODO: is nested normalization necessary? It would seem that all\n            // inline deserializers perform normalization\n            normalizeTextBoundaries(editor, { at: path, ends: 'unwrap' })\n            continue\n        }\n\n        if (isPlainText(child)) {\n            continue\n        }\n\n        const [, before, , after] = child.text.match(/^(\\s*)(.*?)(\\s*)$/)!\n\n        if (after.length > 0) {\n            Transforms.splitNodes(editor, {\n                at: { path, offset: child.text.length - after.length },\n                match: Text.isText,\n            })\n            Transforms.unsetNodes(editor, Object.keys(child), { at: Path.next(path) })\n        }\n\n        if (before.length > 0) {\n            Transforms.splitNodes(editor, {\n                at: { path, offset: before.length },\n                match: Text.isText,\n            })\n            Transforms.unsetNodes(editor, Object.keys(child), { at: path })\n        }\n    }\n\n    // Step 2: remove any white space at start and end of this node by either\n    // unwrapping or trimming it.\n\n    const end = findWhitespaceBoundary(editor, { at: nodePath.current!, affinity: 'end' })\n\n    if (end != null && !Editor.isEnd(editor, end, nodePath.current!)) {\n        if (ends === 'unwrap') {\n            let start\n            if (end.offset === 0) {\n                start = end\n            } else {\n                Transforms.splitNodes(editor, { at: end, match: Text.isText, always: true })\n                start = Path.next(end.path)\n            }\n            Transforms.liftNodes(editor, {\n                at: Editor.range(editor, start, nodePath.current!),\n                match: Text.isText,\n                reverse: true,\n            })\n        } else {\n            Transforms.delete(editor, { at: Editor.range(editor, end, at), hanging: true })\n        }\n    }\n\n    const start = findWhitespaceBoundary(editor, { at: nodePath.current!, affinity: 'start' })\n\n    if (start != null && !Editor.isStart(editor, start, nodePath.current!)) {\n        if (ends === 'unwrap') {\n            if (start.offset !== 0) {\n                Transforms.splitNodes(editor, { at: start, match: Text.isText, always: true })\n            }\n            Transforms.liftNodes(editor, {\n                at: Editor.range(editor, nodePath.current!, start),\n                match: Text.isText,\n            })\n        } else {\n            Transforms.delete(editor, {\n                at: Editor.range(editor, nodePath.current!, start),\n                hanging: true,\n            })\n        }\n    }\n\n    // Step 3: merge any two consecutive text elements into one, as long as they\n    // have the same properties, and remove empty text nodes.\n    collapseAdjacentText(editor, nodePath.current!)\n\n    // Step 4: ensure that all elements begin and end with a text node.\n    let node = Node.ancestor(editor, nodePath.current!)\n\n    if (!Text.isText(node.children[node.children.length - 1])) {\n        editor.apply({\n            type: 'insert_node',\n            path: [...nodePath.current!, node.children.length],\n            node: { text: '' },\n        })\n    }\n\n    if (!Text.isText(node.children[0])) {\n        editor.apply({\n            type: 'insert_node',\n            path: [...nodePath.current!, 0],\n            node: { text: '' },\n        })\n    }\n\n    // Step 5: ensure that there is a text element between every two inline\n    // elements\n    node = Node.ancestor(editor, nodePath.current!)\n    for (const [inx, child] of enumerate(node.children, true)) {\n        if (Editor.isInline(editor, child) && Editor.isInline(editor, node.children[inx + 1])) {\n            editor.apply({\n                type: 'insert_node',\n                path: [...nodePath.current!, inx + 1],\n                node: { text: '' },\n            })\n        }\n    }\n\n    nodePath.unref()\n}\n\nfunction findWhitespaceBoundary(\n    editor: Editor,\n    options: {\n        at: Path,\n        affinity: 'start' | 'end',\n    },\n): Point | undefined {\n    const { at, affinity } = options\n    const node = Node.get(editor, at)\n    const re = affinity === 'start' ? /^\\s*/u : /\\s*$/u\n\n    if (Text.isText(node)) {\n        const match = node.text.match(re)!\n\n        return {\n            path: at,\n            offset: affinity === 'start'\n                ? match[0].length\n                : match.index!,\n        }\n    }\n\n    let lastEmpty = false\n    let isFirst = true\n\n    for (const [index, child] of enumerate(node.children, affinity === 'end')) {\n        if (!Text.isText(child)) {\n            if (isFirst || lastEmpty) return undefined\n\n            return affinity === 'start'\n                ? Editor.end(editor, [...at, index - 1])\n                : Editor.start(editor, [...at, index + 1])\n        }\n\n        const match = child.text.match(re)!\n\n        if (!isFirst && child.text.length > 0 && match[0].length === 0) {\n            return affinity === 'start'\n                ? Editor.end(editor, [...at, index - 1])\n                : Editor.start(editor, [...at, index + 1])\n        }\n\n        lastEmpty = (lastEmpty || isFirst) && child.text.length === 0\n        isFirst = false\n\n        if (match[0].length === child.text.length) continue\n\n        return {\n            path: [...at, index],\n            offset: affinity === 'start'\n                ? match[0].length\n                : match.index!,\n        }\n    }\n}\n\n/** Merge any subsequent text elements sharing same properties */\nexport function collapseAdjacentText(editor: Editor, at: Path): void {\n    const node = Node.ancestor(editor, at)\n\n    for (const [index, child] of enumerate(node.children, true)) {\n        const prev = node.children[index - 1]\n\n        if (Text.isText(child) && Text.isText(prev)\n        && Text.equals(child, prev, { loose: true })) {\n            const { text, ...rest } = child\n            editor.apply({\n                type: 'merge_node',\n                path: [...at, index],\n                position: prev.text.length,\n                target: null,\n                properties: rest,\n            })\n        }\n    }\n}\n\n/**\n * Simplify white space by replacing certain groups of code points with a single\n * codepoint.\n *\n * This function performs steps 1 through 6, assuming that step 7 has already\n * been performed.\n */\nfunction normalizeSpaces(editor: Editor, at: Path) {\n    const node = Node.get(editor, at)\n\n    if (!Text.isText(node)) {\n        for (let i = 0 ; i < node.children.length ; ++i) {\n            normalizeSpaces(editor, [...at, i])\n        }\n        return\n    }\n\n    // no-misleading-character-class warns against using sequences of joining\n    // codepoints as they look like a single character but will be matched\n    // separately. Here this is exactly what we want, so we can safely disable\n    // this lint.\n    /* eslint-disable no-misleading-character-class, max-len */\n\n    // NOTE: this is incredibly slow, but necessary, as there may be refs placed\n    // in `node`. If we applied all changes at once (as one remove_text and one\n    // insert_text operation), position of these refs would be lost.\n\n    // 1st step\n    regexReplace(editor, at, /\\s/gu, replaceWSChar)\n    // 2nd step\n    regexReplace(editor, at, /\\s[\\u180e\\u200b\\u200c\\u200d\\u2060]/g, c => c[0])\n    regexReplace(editor, at, /[\\u180e\\u200b\\u200c\\u200d\\u2060]\\s/g, c => c[1])\n    // 3rd step\n    regexReplace(editor, at, /[\\s\\u180e\\u200b\\u200c\\u200d\\u2060]{2,}/g, collapseWSSequence)\n    // 4th step\n    regexReplace(editor, at, /[\\u0020\\u2000-\\u2006\\u2008\\u2009\\u200A\\u205F]+([\\u1680\\u3000])/g, (_, r) => r!)\n    regexReplace(editor, at, /([\\u1680\\u3000][\\u0020\\u2000-\\u2006\\u2008\\u2009\\u200A\\u205F]+)/g, (_, r) => r!)\n    // 5th step\n    regexReplace(editor, at, /[\\u0020\\u1680\\u2000-\\u2006\\u2008\\u2009\\u200A\\u205F\\u3000]+([\\u00a0])/g, (_, r) => r!)\n    regexReplace(editor, at, /([\\u00a0][\\u0020\\u1680\\u2000-\\u2006\\u2008\\u2009\\u200A\\u205F\\u3000]+)/g, (_, r) => r!)\n    // 6th step\n    regexReplace(editor, at, /[\\s\\u180e\\u200b\\u200c\\u200d\\u2060]{2,}/g, c => c[0])\n\n    /* eslint-enable no-misleading-character-class, max-len */\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nconst WHITE_SPACE_MAP: { [key: string]: string | undefined } = {\n    '\\u0009': ' ', // CHARACTER TABULATION\n    '\\u000a': ' ', // LINE FEED\n    '\\u000b': ' ', // LINE TABULATION\n    '\\u000c': ' ', // FORM FEED\n    '\\u000d': ' ', // CARRAGE RETURN\n    '\\u0085': ' ', // NEXT LINE\n    '\\u2000': ' ', // EN QUAD\n    '\\u2001': ' ', // EM QUAD\n    '\\u2002': ' ', // EN SPACE\n    '\\u2003': ' ', // EM SPACE\n    '\\u2004': ' ', // THREE-PER-EM SPACE\n    '\\u2005': ' ', // FOUR-PER-EM SPACE\n    '\\u2006': ' ', // SIX-PER-EM SPACE\n    '\\u2007': '\\u00a0', // FIGURE SPACE\n    '\\u2008': ' ', // PUNCTUATION SPACE\n    '\\u2009': ' ', // THIN SPACE\n    '\\u200a': ' ', // HAIR SAPCE\n    '\\u2028': ' ', // LINE SEPARATOR\n    '\\u2029': ' ', // PARAGRAPH SEPARATOR\n    '\\u202f': '\\u00a0', // NARROW NO-BREAK SPACE\n    '\\u205f': ' ', // MEDIUM MATHEMATICAL SPACE\n    '\\ufeff': '\\u2060', // ZERO WIDTH NON-BREAKING SPACE\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nfunction replaceWSChar(char: string): string {\n    return WHITE_SPACE_MAP[char] ?? char\n}\n\nfunction collapseWSSequence(seq: string): string {\n    let start = 0\n    let out = ''\n\n    for (let i=1 ; i<seq.length ; ++i) {\n        if (seq[i] !== seq[start]) {\n            out += seq[start]\n            start = i\n        }\n    }\n\n    if (seq[start] === seq[seq.length - 1]) {\n        out += seq[start]\n    }\n\n    return out\n}\n\n/**\n * Equivalent of String#replace working on Slate nodes\n *\n * This function will replace each occurrence by issuing `remove_text` and\n * `apply_text` operations.\n *\n * `path` must point at a {@link Text} node.\n */\nfunction regexReplace(\n    editor: Editor,\n    path: Path,\n    re: RegExp,\n    replacer: (substring: string, ...args: (string | undefined)[]) => string,\n) {\n    Editor.withoutNormalizing(editor, () => {\n        const node = Node.get(editor, path)\n\n        if (!Text.isText(node)) {\n            throw new Error(\n                `Cannot RegExp replace a non-text node at path [${JSON.stringify(path)}]`)\n        }\n\n        let adjust = 0\n\n        for (const m of node.text.matchAll(re)) {\n            const [remove, ...args] = m\n            const add = replacer(remove, ...args)\n            const offset = m.index! + adjust\n\n            editor.apply({ type: 'remove_text', path, offset, text: remove })\n            editor.apply({ type: 'insert_text', path, offset, text: add })\n\n            adjust += add.length - remove.length\n        }\n    })\n}\n","export const XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n\nexport const XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n\nexport const CNXML_NAMESPACE = 'http://cnx.rice.edu/cnxml'\n\n/** Natural language extensions to CNXML */\nexport const CMLNLE_NAMESPACE = 'http://katalysteducation.org/cmlnle/1.0'\n\nexport const CXLXT_NAMESPACE = 'http://katalysteducation.org/cxlxt/1.0'\n\n/** CNXML extensions to facilitate better editing experience */\nexport const EDITING_NAMESPACE = 'http://adaptarr.naukosfera.com/editing/1.0'\n","// Copyright 2020 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\nimport * as Slate from 'slate'\nimport * as CNX from 'cnx-designer'\nimport { List, MediaUse, StyledText, Table, WithClasses } from 'cnx-designer'\nimport { Editor, Path, Text, Transforms } from 'slate'\n\nimport normalizeWhiteSpace, { collapseAdjacentText } from './whitespace'\nimport { CnxmlVersion, Document as Doc } from '.'\nimport {\n    CMLNLE_NAMESPACE, CNXML_NAMESPACE, CXLXT_NAMESPACE, EDITING_NAMESPACE, XML_NAMESPACE,\n} from './consts'\nimport { enumerate } from './util'\n\n/**\n * Editor used for deserialization\n *\n * This interface extends Slate's editor with various methods used for\n * deserialization. Those methods (as well as those of Editor) can be\n * overwritten to customize how a document is deserialized.\n */\nexport interface DeserializingEditor extends Editor {\n    errors: DeserializingError[]\n\n    /**\n     * Deserialize an element\n     *\n     * This function is passed the element to deserialize, path at which nodes\n     * it deserializes to should be inserted, and a context defining what\n     * elements were expected at this place in the document.\n     */\n    deserializeElement(el: Element, at: Path, context: Deserializers): void\n\n    /**\n     * Handle unknown element\n     *\n     * This function is called by {@link #deserializeElement} for elements which\n     * are either unknown or unexpected at a given place in document.\n     */\n    unknownElement(el: Element, at: Path, context: Deserializers): void\n\n    /**\n     * Report a deserialization problem\n     *\n     * `type` is a code describing the error and should only contain letters and\n     * hyphens. `description` contains additional information which may be used\n     * to format a user message.\n     */\n    reportError(type: string, description?: { [key: string]: unknown }): void\n\n    /** Finalize deserialization */\n    finalize(): Doc\n}\n\nexport interface DeserializingError {\n    type: string\n    [key: string]: unknown\n}\n\n/**\n * Deserialize a CNXML document from xml or a DOM tree\n *\n * The provided editor will be used for deserialization and will be modified.\n * After deserialization is complete, the editor will contain the same content\n * as the returned {@link Doc} element.\n */\nexport default function deserialize(\n    withEditor: (editor: DeserializingEditor) => DeserializingEditor,\n    xml: string | Document,\n): Doc {\n    if (typeof xml === 'string') {\n        xml = new DOMParser().parseFromString(xml, 'application/xml')\n        const [error] = xml.getElementsByName('parseerror')\n\n        if (error != null) {\n            throw new Error(`Invalid XML: ${error.textContent}`)\n        }\n    }\n\n    const root = xml.documentElement\n\n    if (root.namespaceURI !== CNXML_NAMESPACE || root.localName !== 'document') {\n        throw new Error(`Invalid XML: root element is {${root.namespaceURI}}${\n            root.localName} instead of {${CNXML_NAMESPACE}}document`)\n    }\n\n    const doc: Doc = {\n        moduleId: root.getAttribute('module-id') ?? 'new',\n        version: (root.getAttribute('cnxml-version') ?? '0.7') as CnxmlVersion,\n        title: '',\n        content: [],\n    }\n\n    if (doc.version !== '0.7' && doc.version !== '0.8') {\n        throw new Error('Only CNXML 0.7 and 0.8 are supported')\n    }\n\n    if (root.hasAttributeNS(XML_NAMESPACE, 'lang')) {\n        doc.language = root.getAttributeNS(XML_NAMESPACE, 'lang')!\n    }\n\n    if (root.hasAttribute('class')) {\n        doc.classes = WithClasses.normalizeClasses([root.getAttribute('class')!])\n    }\n\n    const editor = withEditor(withDeserializingEditor(doc, Slate.createEditor()))\n\n    Editor.withoutNormalizing(editor, () => {\n        for (const child of root.children) {\n            if (child.namespaceURI !== CNXML_NAMESPACE) {\n                editor.reportError('unexpected-element', {\n                    namespace: child.namespaceURI,\n                    localName: child.localName,\n                })\n                continue\n            }\n\n            switch (child.localName) {\n            case 'metadata': continue\n\n            case 'title':\n                doc.title = child.textContent ?? ''\n                break\n\n            case 'content':\n                content(editor, child)\n                break\n\n            case 'glossary':\n                glossary(editor, child)\n                break\n\n            default:\n                editor.reportError('unexpected-element', {\n                    namespace: child.namespaceURI,\n                    localName: child.localName,\n                })\n                break\n            }\n        }\n\n        doc.content = editor.children\n    })\n\n    if (editor.children !== doc.content) {\n        editor.reportError('normalized')\n        doc.content = editor.children\n    }\n\n    return editor.finalize()\n}\n\n/**\n * Wrap a Slate editor with additional deserialization-oriented functionality\n */\nfunction withDeserializingEditor(doc: Doc, ed: Editor): DeserializingEditor {\n    const editor = ed as DeserializingEditor\n\n    editor.deserializeElement = function deserializeElement(el, at, context) {\n        if (el.namespaceURI === CNXML_NAMESPACE\n        || el.namespaceURI === EDITING_NAMESPACE) {\n            const deserializer = context[el.localName]\n\n            if (deserializer != null) {\n                return deserializer(editor, el, at)\n            }\n        }\n\n        editor.unknownElement(el, at, context)\n    }\n\n    editor.unknownElement = function unknownElement(el, at, context) {\n        if (el.namespaceURI === CNXML_NAMESPACE\n        || el.namespaceURI === EDITING_NAMESPACE) {\n            const deserializer = FALLBACK[el.localName]\n\n            if (deserializer != null) {\n                editor.reportError('unexpected-element', {\n                    namespace: el.namespaceURI,\n                    localName: el.localName,\n                    id: el.getAttribute('id'),\n                })\n                return deserializer(editor, el, at)\n            }\n        }\n\n        editor.reportError('unknown-element', {\n            namespace: el.namespaceURI,\n            localName: el.localName,\n            id: el.getAttribute('id'),\n        })\n        children(editor, el, at, context)\n    }\n\n    editor.reportError = function reportError(type, description) {\n        console.error(type, description)\n    }\n\n    editor.finalize = function finalize() {\n        return doc\n    }\n\n    return editor\n}\n\nexport type Deserializer = (editor: DeserializingEditor, el: Element, at: Path) => void\n\nexport type Deserializers = { [localName: string]: Deserializer }\n\n/**\n * Deserialize children of an element\n *\n * This function will deserialize all child nodes of el, each into a separate\n * Slate node. This means that every XML text node will produce a Slate text\n * node, and all formatting white space will be treated as content, even for\n * block elements. This should later be fixed using {@link normalizeBlock} or\n * {@link normalizeLine}.\n */\nexport function children(\n    editor: DeserializingEditor,\n    el: Element,\n    at: Path,\n    context: Deserializers,\n): void {\n    const path = Editor.pathRef(editor, at)\n\n    for (const child of el.childNodes) {\n        switch (child.nodeType) {\n        case Node.ELEMENT_NODE:\n            editor.deserializeElement(child as Element, path.current!, context)\n            break\n\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            editor.apply({\n                type: 'insert_node',\n                path: path.current!,\n                node: { text: (child as CharacterData).data },\n            })\n            break\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            editor.apply({\n                type: 'insert_node',\n                path: path.current!,\n                node: {\n                    type: 'processing_instruction',\n                    target: (child as ProcessingInstruction).target,\n                    value: (child as ProcessingInstruction).data,\n                    children: [{ text: '' }],\n                },\n            })\n            break\n\n        // Comments, etc.\n        default: break\n        }\n    }\n\n    if (el.childNodes.length === 0) {\n        editor.apply({ type: 'insert_node', path: path.current!, node: { text: '' } })\n    }\n\n    path.unref()\n}\n\n/**\n * Build an element according to a template and insert it at a path\n *\n * The template will be extended with additional properties common to all CNXML\n * elements.\n *\n * Element's children will be deserialized using {@link children}.\n */\nexport function buildElement(\n    editor: DeserializingEditor,\n    el: Element,\n    at: Path,\n    template: Partial<Slate.Element>,\n    context: Deserializers,\n    withChildren: boolean = true,\n): void {\n    const node: Slate.Element = { children: [], ...template }\n\n    if (el.hasAttribute('id')) {\n        node.id = el.getAttribute('id')\n    }\n\n    if (el.hasAttribute('class')) {\n        node.classes = WithClasses.normalizeClasses([el.getAttribute('class')!])\n    }\n\n    for (const [key, value] of Object.entries(node)) {\n        if (key === 'children' || key === 'text') continue\n\n        if (value == null) {\n            delete node[key]\n        }\n    }\n\n    Transforms.insertNodes(editor, node, { at })\n    if (withChildren) children(editor, el, [...at, 0], context)\n}\n\n/**\n * Normalize a block element after deserialization.\n *\n * All inter-element white space will be removed, and non-white space text will\n * be converted into paragraphs.\n */\nexport function normalizeBlock(editor: DeserializingEditor, at: Path): void {\n    collapseAdjacentText(editor, at)\n\n    for (const [node, path] of Slate.Node.children(editor, at, { reverse: true })) {\n        if (!Text.isText(node)) continue\n\n        if (/^\\s*$/.test(node.text)) {\n            editor.apply({ type: 'remove_node', path, node })\n        } else {\n            editor.reportError('text-in-block')\n            Transforms.wrapNodes(editor, {\n                type: 'paragraph',\n                children: [],\n            }, { at: path })\n            normalizeWhiteSpace(editor, path)\n        }\n    }\n}\n\n/**\n * Normalize a line element after deserialization\n *\n * White space will be normalized (and trailing removed), and block children\n * will be unwrapped, splitting this element if necessary.\n */\nexport function normalizeLine(editor: Editor, at: Path): void {\n    const node = Slate.Node.get(editor, at) as Slate.Element\n    const hasBlocks = node.children.some(n => Slate.Element.isElement(n) && !editor.isInline(n))\n\n    if (!hasBlocks) {\n        normalizeWhiteSpace(editor, at)\n    } else {\n        const next = Path.next(at)\n        let end = node.children.length\n\n        for (const [inx, child] of enumerate(node.children, true)) {\n            if (Text.isText(child) || editor.isInline(child)) {\n                continue\n            }\n\n            if (inx + 1 < end) {\n                Transforms.splitNodes(editor, { at: [...at, inx + 1] })\n                normalizeWhiteSpace(editor, next)\n\n                const newNode = Slate.Node.get(editor, next) as Slate.Element\n                if (newNode.children.length === 1 && Text.isText(newNode.children[0])\n                && newNode.children[0].text.match(/^\\s*$/)) {\n                    Transforms.removeNodes(editor, { at: next })\n                }\n            }\n\n            Transforms.liftNodes(editor, { at: [...at, inx] })\n            end = inx\n        }\n\n        if (end > 0) {\n            normalizeWhiteSpace(editor, at)\n\n            const newNode = Slate.Node.get(editor, at) as Slate.Element\n            if (newNode.children.length === 1 && Text.isText(newNode.children[0])\n            && newNode.children[0].text.match(/^\\s*$/)) {\n                Transforms.removeNodes(editor, { at })\n            }\n        }\n    }\n}\n\n/** Normalize element which can contain either line content or block content */\nexport function normalizeMixed(editor: DeserializingEditor, at: Path) {\n    const node = Slate.Node.get(editor, at)\n\n    if (!Slate.Element.isElement(node)) {\n        throw new Error(`Cannot normalize node at path [${\n            JSON.stringify(at)}] as it is not an element`)\n    }\n\n    const line = node.children.every(\n        (n: Slate.Node) => Text.isText(n) || Editor.isInline(editor, n))\n\n    if (line) {\n        Transforms.wrapNodes(editor, {\n            type: 'paragraph',\n            children: [],\n        }, {\n            at,\n            match: n => node.children.includes(n),\n        })\n        normalizeLine(editor, [...at, 0])\n    } else {\n        normalizeBlock(editor, at)\n    }\n}\n\n/** Normalize element which shouldn't contain any children */\nexport function normalizeVoid(editor: DeserializingEditor, at: Path): void {\n    const node = Slate.Node.get(editor, at)\n\n    if (!Slate.Element.isElement(node)) {\n        throw new Error(`Cannot normalize node at path [${\n            JSON.stringify(at)}] as it is not an element`)\n    }\n\n    if (node.children.length > 0) {\n        normalizeWhiteSpace(editor, at)\n    }\n\n    if (node.children.length === 1\n    && Text.isText(node.children[0]) && node.children[0].text === '') {\n        return\n    }\n\n    if (node.children.length > 0) {\n        editor.reportError('content-in-void')\n    }\n\n    const newPath = Path.next(at)\n    for (let index = node.children.length - 1 ; index >= 0 ; --index) {\n        editor.apply({ type: 'move_node', path: [...at, index], newPath })\n    }\n\n    editor.apply({ type: 'insert_node', path: [...at, 0], node: { text: '' } })\n}\n\n/** Build deserializer for block elements */\nfunction block(template: string | Partial<Slate.Element>, context: Deserializers) {\n    const node = typeof template === 'string'\n        ? { type: template }\n        : template\n\n    return function deserializer(editor: DeserializingEditor, el: Element, at: Path) {\n        buildElement(editor, el, at, node, context)\n        normalizeBlock(editor, at)\n    }\n}\n\n/** Build deserializer for line elements */\nfunction line(template: string | Partial<Slate.Element>, context?: Deserializers) {\n    const node = typeof template === 'string'\n        ? { type: template }\n        : template\n\n    return function deserializer(editor: DeserializingEditor, el: Element, at: Path) {\n        buildElement(editor, el, at, node, context ?? INLINE)\n        normalizeLine(editor, at)\n    }\n}\n\n/** Build deserializer for mixed elements */\nfunction mixed(template: string | Partial<Slate.Element>, content: Deserializers) {\n    const node = typeof template === 'string'\n        ? { type: template }\n        : template\n\n    return function deserializer(editor: DeserializingEditor, el: Element, at: Path) {\n        buildElement(editor, el, at, node, { ...INLINE, ...content })\n        normalizeMixed(editor, at)\n    }\n}\n\n/** --- deserialization contexts -------------------------------------------- */\n\n/** Deserialize a <caption> */\nconst caption = line('caption')\n\n/** Deserialize a <title> */\nconst title = line('title')\n\n/** Inline elements */\nexport const INLINE: Deserializers = {\n    code,\n    emphasis: mark,\n    footnote: line('footnote'),\n    foreign,\n    link,\n    sub: mark,\n    sup: mark,\n    term,\n    preformat,\n}\n\n/** Line elements */\nexport const LINE: Deserializers = {\n    code,\n    list,\n    para: line('paragraph'),\n    preformat,\n}\nLINE.quote = mixed('quotation', LINE)\n\n/** Deserialize a <definition> */\nconst definition = block('definition', {\n    example: block('definition_example', LINE),\n    meaning: mixed('definition_meaning', LINE),\n    seealso: block('definition_seealso', { term: definitionTerm }),\n    term: definitionTerm,\n})\n\n/** Contents of an exercise */\nconst EXERCISE = {\n    commentary: block('exercise_commentary', LINE),\n    problem: block('exercise_problem', LINE),\n    solution: block('exercise_solution', LINE),\n}\n\n/** Contents of a figure */\nconst FIGURE = {\n    caption,\n    media,\n    subfigure: block('figure', { media, caption }),\n    title,\n}\n\n/** Block elements */\nexport const BLOCK: Deserializers = {\n    ...LINE,\n    definition,\n    exercise: block('exercise', EXERCISE),\n    figure: block('figure', FIGURE),\n    note,\n    rule,\n    table,\n}\n\n/** Content of most mixed elements */\nexport const MIXED = { ...LINE, ...INLINE }\n\n/** Media items */\nconst MEDIA = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'alt-text': line('media_alt', {}),\n    audio: mediaItem,\n    image: mediaItem,\n    video: mediaItem,\n}\n\n/** Contents of a rule */\nconst RULE = {\n    example: block('rule_example', LINE),\n    proof: block('rule_proof', LINE),\n    statement: block('rule_statement', LINE),\n    title,\n}\n\n/** Contents of a admonition */\nconst ADMONITION = {\n    ...MIXED,\n    figure: block('figure', FIGURE),\n    title,\n}\n\n/** Contents of a list */\nconst LIST = { item }\n\n/** Contents of a glossary */\nconst GLOSSARY = { definition }\n\n/** Document content */\nconst CONTENT = { ...BLOCK, section }\n\n/** Section content */\nconst SECTION = { ...CONTENT, title }\n\n/** Deserializers to use when one couldn't be found in context */\nconst FALLBACK: Deserializers = { ...INLINE, ...SECTION, ...MEDIA }\n\n/* --- deserializers -------------------------------------------------------- */\n\n/** Deserialize <code> */\nfunction code(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, {\n        type: 'code',\n        language: el.getAttribute('lang'),\n        placement: el.getAttribute('display') === 'block' ? 'block' : 'line',\n    }, INLINE)\n    // NOTE: this element contains pre-formatted content and should not be\n    // normalized.\n}\n\n/** Deserialize <content> */\nfunction content(editor: DeserializingEditor, el: Element): void {\n    children(editor, el, [0], CONTENT)\n    normalizeBlock(editor, [])\n}\n\n/** Deserialize a <term> in <definition> */\nfunction definitionTerm(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, {\n        type: 'definition_term',\n        reference: el.getAttributeNS(CMLNLE_NAMESPACE, 'reference'),\n    }, INLINE)\n    normalizeLine(editor, at)\n}\n\n/** Deserialize <foreign> */\nfunction foreign(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, {\n        type: 'foreign',\n        language: el.getAttributeNS(XML_NAMESPACE, 'lang'),\n    }, INLINE)\n    normalizeLine(editor, at)\n}\n\n/** Deserialize <glossary> */\nfunction glossary(editor: DeserializingEditor, el: Element): void {\n    const path = [editor.children.length]\n    buildElement(editor, el, path, { type: 'glossary' }, GLOSSARY)\n    normalizeBlock(editor, path)\n}\n\n/** Deserialize a list item */\nfunction item(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, { type: 'list_item' }, MIXED)\n    normalizeMixed(editor, at)\n\n    const node = Slate.Node.get(editor, at) as Slate.Element\n    if (node.children.length === 1 && List.isList(node.children[0])) {\n        Transforms.unwrapNodes(editor, { at })\n    }\n}\n\n/** Deserialize a cross-reference, a document reference, or a hyperlink */\nfunction link(editor: DeserializingEditor, el: Element, at: Path): void {\n    const target = el.getAttribute('target-id')\n    const document = el.getAttribute('document')\n    const url = el.getAttribute('url')\n\n    if (target != null) {\n        buildElement(editor, el, at, {\n            type: 'xref',\n            target,\n            document,\n            case: el.getAttributeNS(CMLNLE_NAMESPACE, 'case'),\n            children: [],\n        }, {})\n        normalizeVoid(editor, at)\n    } else if (url != null) {\n        buildElement(editor, el, at, { type: 'link', url }, INLINE)\n        normalizeLine(editor, at)\n    } else if (document != null) {\n        buildElement(editor, el, at, {\n            type: 'docref',\n            document,\n            case: el.getAttributeNS(CMLNLE_NAMESPACE, 'case'),\n        }, INLINE)\n        normalizeVoid(editor, at)\n    } else {\n        editor.reportError('link-missing-target')\n        children(editor, el, at, INLINE)\n    }\n}\n\nfunction list(editor: DeserializingEditor, el: Element, at: Path): void {\n    const props = el.getAttribute('list-type') === 'enumerated'\n        ? {\n            type: 'list',\n            style: 'enumerated',\n            numberStyle: el.getAttribute('number-style') ?? 'arabic',\n            start: Number(el.getAttribute('start-value') ?? 1),\n        }\n        : {\n            type: 'list',\n            style: 'bulleted',\n            bullet: el.getAttribute('bullet') ?? 'bullet',\n        }\n\n    buildElement(editor, el, at, props, LIST)\n    normalizeBlock(editor, at)\n}\n\nconst MARKS: { [key: string]: Omit<StyledText, 'text'> } = {\n    sub: { position: 'subscript' },\n    sup: { position: 'superscript' },\n    bold: { strong: true },\n    underline: { underline: true },\n    italics: { emphasis: true },\n}\n\n/** Deserialize a styling element */\nfunction mark(editor: DeserializingEditor, el: Element, at: Path): void {\n    const mark = el.localName === 'emphasis'\n        ? el.getAttribute('effect') ?? 'bold'\n        : el.localName\n    const props = MARKS[mark]\n    const end = Editor.pathRef(editor, at)\n\n    children(editor, el, at, INLINE)\n\n    if (props != null) {\n        Transforms.setNodes(editor, props, {\n            at: Editor.range(editor, at, Path.previous(end.current!)),\n            match: Text.isText,\n        })\n    }\n\n    end.unref()\n}\n\n/** Deserialize media container */\nfunction media(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, { type: 'media' }, MEDIA)\n\n    const node = Slate.Node.get(editor, at) as Slate.Element\n\n    if (!node.children.some((n: Slate.Node) => n.type === 'media_alt')\n    && el.hasAttribute('alt')) {\n        const path = [...at, node.children.length]\n        editor.apply({\n            type: 'insert_node',\n            path,\n            node: {\n                type: 'media_alt',\n                children: [{ text: el.getAttribute('alt')! }],\n            },\n        })\n        normalizeWhiteSpace(editor, path)\n    }\n\n    normalizeBlock(editor, at)\n}\n\n/** Deserialize a media item */\nfunction mediaItem(editor: DeserializingEditor, el: Element, at: Path): void {\n    const use = el.getAttribute('for')\n\n    buildElement(editor, el, at, {\n        type: 'media_' + el.localName,\n        src: el.getAttribute('src'),\n        intendedUse: MediaUse.isMediaUse(use) ? use : 'all',\n    }, {})\n\n    normalizeVoid(editor, at)\n}\n\n/** Deserialize an admonition */\nfunction note(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, {\n        type: 'admonition',\n        kind: el.getAttribute('type') ?? 'note',\n    }, ADMONITION)\n    normalizeMixed(editor, at)\n}\n\n/** Deserialize <preformat> */\nfunction preformat(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, { type: 'preformat' }, INLINE)\n    // NOTE: this element contains pre-formatted content and should not be\n    // normalized.\n}\n\n/** Deserialize a rule */\nfunction rule(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, {\n        type: 'rule',\n        kind: el.getAttribute('type') ?? 'rule',\n    }, RULE)\n    normalizeBlock(editor, at)\n}\n\n/** Deserialize a <section> */\nfunction section(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, { type: 'section' }, SECTION)\n    normalizeBlock(editor, at)\n}\n\n/** Deserialize a <term> */\nfunction term(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, {\n        type: 'term',\n        index: el.getAttributeNS(CXLXT_NAMESPACE, 'index'),\n        reference: el.getAttributeNS(CMLNLE_NAMESPACE, 'reference'),\n        name: el.getAttributeNS(CXLXT_NAMESPACE, 'name'),\n        born: el.hasAttributeNS(CXLXT_NAMESPACE, 'born')\n            ? Number(el.getAttributeNS(CXLXT_NAMESPACE, 'born'))\n            : undefined,\n        died: el.hasAttributeNS(CXLXT_NAMESPACE, 'died')\n            ? Number(el.getAttributeNS(CXLXT_NAMESPACE, 'died'))\n            : undefined,\n    }, INLINE)\n    normalizeLine(editor, at)\n}\n\n/* --- CALS table deserializers --------------------------------------------- */\n\nconst TABLE = { title, tgroup, caption }\nconst TGROUP = {\n    thead: theadfoot('table_header'),\n    tfoot: theadfoot('table_footer'),\n}\n\n/** Deserialize a <table> */\nfunction table(editor: DeserializingEditor, el: Element, at: Path): void {\n    buildElement(editor, el, at, {\n        type: 'table',\n    }, TABLE)\n\n    const node = Slate.Node.get(editor, at) as Slate.Element\n    const summary = requireAttribute(editor, el, 'summary') ?? ''\n\n    if (!node.children.some(n => n.type === 'table_summary') && summary !== '') {\n        const path = [...at, node.children.length]\n        editor.apply({\n            type: 'insert_node',\n            path,\n            node: {\n                type: 'table_summary',\n                children: [{ text: summary }],\n            },\n        })\n        normalizeWhiteSpace(editor, path)\n    }\n\n    normalizeBlock(editor, at)\n}\n\n/** Deserialize a <tgroup> */\nfunction tgroup(editor: DeserializingEditor, el: Element, at: Path): void {\n    const cols = numericAttribute(editor, el, 'cols') ?? 1\n\n    const columns: CNX.TableColumn[] = []\n    const columnNames = new Set<string>()\n    const spans: CNX.TableSpan[] = []\n    const spanNames = new Set<string>()\n\n    let header = null\n    let footer = null\n    let body = null\n\n    // Pre-process children\n    for (const child of el.children) {\n        if (child.namespaceURI !== CNXML_NAMESPACE) {\n            editor.reportError('unknown-element', {\n                namespace: child.namespaceURI,\n                localName: child.localName,\n                id: child.getAttribute('id'),\n            })\n            continue\n        }\n\n        switch (child.localName) {\n        case 'colspec': {\n            const colname = child.getAttribute('colname') ?? null\n            const colnum = numericAttribute(editor, child, 'colnum', false)\n\n            if (colnum != null && colnum !== columns.length + 1) {\n                editor.reportError('invalid-attribute', {\n                    namespace: child.namespaceURI,\n                    localName: child.localName,\n                    id: colname,\n                    attNamespace: null,\n                    attName: 'colnum',\n                })\n            }\n\n            if (colname != null) {\n                if (columnNames.has(colname)) {\n                    editor.reportError('invalid-attribute', {\n                        namespace: child.namespaceURI,\n                        localName: child.localName,\n                        id: colname,\n                        attNamespace: null,\n                        attName: 'colname',\n                        error: 'duplicate-name',\n                    })\n                } else {\n                    columnNames.add(colname)\n                }\n            }\n\n            columns.push({ name: colname })\n            break\n        }\n\n        case 'spanspec': {\n            const name = requireAttribute(editor, child, 'spanname')\n            const start = setAttribute(editor, child, 'namest', columnNames)\n            const end = setAttribute(editor, child, 'nameend', columnNames)\n\n            if (name == null || start == null || end == null) break\n\n            if (spanNames.has(name)) {\n                editor.reportError('invalid-attribute', {\n                    namespace: child.namespaceURI,\n                    localName: child.localName,\n                    id: name,\n                    attNamespace: null,\n                    attName: 'spanname',\n                    error: 'duplicate-name',\n                })\n            }\n\n            spans.push({ name, start, end })\n            spanNames.add(name)\n\n            break\n        }\n\n        // TODO: ensure only one\n        case 'thead':\n            header = child\n            break\n\n        // TODO: ensure only one\n        case 'tfoot':\n            footer = child\n            break\n\n        // TODO: ensure exactly one\n        case 'tbody':\n            body = child\n            break\n\n        default:\n            editor.reportError('unknown-element', {\n                namespace: child.namespaceURI,\n                localName: child.localName,\n                id: child.getAttribute('id'),\n            })\n            break\n        }\n    }\n\n    // Infer missing columns\n    while (columns.length < cols) {\n        columns.push({\n            name: null,\n        })\n    }\n\n    // Insert group into the document\n    buildElement(editor, el, at, {\n        type: 'table_group',\n        columns, spans,\n    }, {}, false)\n\n    // Process content\n    const path = Editor.pathRef(editor, [...at, 0])\n\n    if (header != null) {\n        editor.deserializeElement(header, path.current!, TGROUP)\n    }\n\n    if (body != null) {\n        tableBody(editor, body, at, path.current!)\n    }\n\n    if (footer != null) {\n        editor.deserializeElement(footer, path.current!, TGROUP)\n    }\n\n    path.unref()\n    normalizeBlock(editor, at)\n}\n\n/** Deserialize a <thead> or <tfoot> */\nfunction theadfoot(type: string): Deserializer {\n    return function deserializer(editor: DeserializingEditor, el: Element, at: Path): void {\n        const columns = []\n        const columnNames = new Set<string>()\n\n        for (const child of el.children) {\n            if (child.namespaceURI !== CNXML_NAMESPACE) {\n                editor.reportError('unknown-element', {\n                    namespace: child.namespaceURI,\n                    localName: child.localName,\n                    id: child.getAttribute('id'),\n                })\n                continue\n            }\n\n            switch (child.localName) {\n            case 'colspec': {\n                const colname = child.getAttribute('colname') ?? null\n                const colnum = numericAttribute(editor, child, 'colnum', false)\n                    ?? columns.length + 1\n\n                if (colnum <= columns.length) {\n                    editor.reportError('invalid-attribute', {\n                        namespace: child.namespaceURI,\n                        localName: child.localName,\n                        id: colname,\n                        attNamespace: null,\n                        attName: 'colnum',\n                    })\n                }\n\n                if (colname != null) {\n                    if (columnNames.has(colname)) {\n                        editor.reportError('invalid-attribute', {\n                            namespace: child.namespaceURI,\n                            localName: child.localName,\n                            id: colname,\n                            attNamespace: null,\n                            attName: 'colname',\n                            error: 'duplicate-name',\n                        })\n                    } else {\n                        columnNames.add(colname)\n                    }\n                }\n\n                while (colnum > columns.length + 1) {\n                    columns.push({ name: null })\n                }\n\n                columns.push({ name: colname })\n                break\n            }\n\n            case 'row': break\n\n            default:\n                editor.reportError('unknown-element', {\n                    namespace: child.namespaceURI,\n                    localName: child.localName,\n                    id: child.getAttribute('id'),\n                })\n                break\n            }\n        }\n\n        buildElement(editor, el, at, {\n            type,\n            columns: columns.length > 0 ? columns : null,\n        }, {}, false)\n        tableBody(editor, el, at)\n    }\n}\n\ntype CellInfo =\n    /** Unallocated cell */\n    | false\n    /** Continuation of a {@code morerows} cell */\n    | true\n\n/**\n * Deserialize body of a <thead>, <tbody>, or <tfoot>\n *\n * Assumes that {@link buildElement the node was already inserted}.\n */\nfunction tableBody(\n    editor: DeserializingEditor,\n    el: Element,\n    at: Path,\n    start: Path = [...at, 0],\n): void {\n    let rows = 0\n    for (const child of el.children) {\n        if (child.namespaceURI === CNXML_NAMESPACE && child.localName === 'row') rows += 1\n    }\n\n    const columns = Table.columns(editor, at)\n    const table: CellInfo[][] = Array(rows)\n        .fill(0)\n        .map(() => Array<boolean>(columns.columns.length).fill(false))\n\n    let row = 0\n    const path = Editor.pathRef(editor, start)\n\n    for (const child of el.children) {\n        if (child.namespaceURI !== CNXML_NAMESPACE) {\n            editor.reportError('unknown-element', {\n                namespace: child.namespaceURI,\n                localName: child.localName,\n                id: child.getAttribute('id'),\n            })\n            continue\n        }\n\n        switch (child.localName) {\n        case 'row':\n            tableRow(editor, child, path.current!, table, row)\n            row += 1\n            break\n\n        case 'colspec':\n            break\n\n        default:\n            editor.reportError('unknown-element', {\n                namespace: child.namespaceURI,\n                localName: child.localName,\n                id: child.getAttribute('id'),\n            })\n            break\n        }\n    }\n\n    path.unref()\n    normalizeBlock(editor, at)\n}\n\nfunction tableRow(\n    editor: DeserializingEditor,\n    el: Element,\n    at: Path,\n    table: CellInfo[][],\n    row: number,\n): void {\n    buildElement(editor, el, at, {\n        type: 'table_row',\n    }, {}, false)\n\n    const columns = Table.columns(editor, at)\n    const columnNames = new Set(Object.keys(columns.columnNames))\n    const spanNames = new Set(Object.keys(columns.spans))\n    let column = 1\n    const entry = Editor.pathRef(editor, [...at, 0])\n\n    for (const child of el.children) {\n        if (child.namespaceURI !== CNXML_NAMESPACE) {\n            editor.reportError('unknown-element', {\n                namespace: child.namespaceURI,\n                localName: child.localName,\n                id: child.getAttribute('id'),\n            })\n            continue\n        }\n\n        let start: number\n        let end: number\n        let cellcolumn\n\n        const spanname = setAttribute(editor, child, 'spanname', spanNames, false)\n        const namest = setAttribute(editor, child, 'namest', columnNames, false)\n        const nameend = setAttribute(editor, child, 'nameend', columnNames, false)\n        const colname = setAttribute(editor, child, 'colname', columnNames, false)\n        const colnameFinal = namest ?? colname\n        const morerows = numericAttribute(editor, child, 'morerows', false) ?? 0\n\n        if (row + morerows >= table.length) {\n            editor.reportError('invalid-attribute', {\n                namespace: child.namespaceURI,\n                localName: child.localName,\n                id: child.getAttribute('id'),\n                attNamespace: null,\n                attName: 'morerows',\n            })\n        }\n\n        if (spanname != null) {\n            const span = columns.spans[spanname]\n            start = columns.columnNames[span.start] + 1\n            end = columns.columnNames[span.end] + 1\n            cellcolumn = { span: spanname }\n        } else if (namest != null && nameend != null) {\n            start = columns.columnNames[namest] + 1\n            end = columns.columnNames[nameend] + 1\n            cellcolumn = { start: namest, end: nameend }\n\n            if (start > end) {\n                editor.reportError('invalid-attribute', {\n                    namespace: child.namespaceURI,\n                    localName: child.localName,\n                    id: child.getAttribute('id'),\n                    attNamespace: null,\n                    attName: 'nameend',\n                })\n                end = start\n            }\n        } else if (colnameFinal != null) {\n            start = end = columns.columnNames[colnameFinal] + 1\n            cellcolumn = { column: colnameFinal }\n        } else /* implicit positioning */ {\n            // Skip cells taken by morerows\n            while (table[row][column - 1]) ++column\n\n            start = end = column\n            cellcolumn = null\n        }\n\n        // Insert implicit columns\n        while (column < start) {\n            if (!table[row][column - 1]) {\n                Transforms.insertNodes(editor, {\n                    type: 'table_cell',\n                    children: [{\n                        type: 'paragraph',\n                        children: [{ text: '' }],\n                    }],\n                } as CNX.TableCell, { at: entry.current! })\n                column += 1\n            }\n        }\n\n        column = end + 1\n\n        // Check conflicts\n        for (let i = start ; i < end; ++i) {\n            if (table[row][i - 1]) {\n                editor.reportError('overlapping-cells', {\n                    namespace: child.namespaceURI,\n                    localName: child.localName,\n                    id: child.getAttribute('id'),\n                })\n            }\n        }\n\n        // Mark taken rows\n        for (let r = row; r <= row + morerows; ++r) {\n            for (let c = start - 1; c < end; ++c) {\n                table[r][c] = true\n            }\n        }\n\n        switch (child.localName) {\n        case 'entry': {\n            const path = entry.current!\n            buildElement(editor, child, path, {\n                type: 'table_cell',\n                column: cellcolumn,\n                rows: morerows > 0 ? morerows + 1 : null,\n            }, MIXED)\n            normalizeMixed(editor, path)\n            break\n        }\n\n        default:\n            editor.reportError('unknown-element', {\n                namespace: child.namespaceURI,\n                localName: child.localName,\n                id: child.getAttribute('id'),\n            })\n            break\n        }\n    }\n\n    // Insert implicit trailing columns\n    while (column <= columns.columns.length) {\n        Transforms.insertNodes(editor, {\n            type: 'table_cell',\n            children: [{\n                type: 'paragraph',\n                children: [{ text: '' }],\n            }],\n        } as CNX.TableCell, { at: entry.current! })\n        column += 1\n    }\n\n    entry.unref()\n    normalizeBlock(editor, at)\n}\n\n/* --- utilities ------------------------------------------------------------ */\n\n/** Get value of an attribute, reporting an error if it is missing */\nfunction requireAttribute(\n    editor: DeserializingEditor,\n    el: Element,\n    name: string,\n): string | null {\n    if (!el.hasAttribute(name)) {\n        editor.reportError('missing-attribute', {\n            namespace: el.namespaceURI,\n            localName: el.localName,\n            id: el.getAttribute('id'),\n            attNamespace: null,\n            attName: name,\n        })\n        return null\n    }\n\n    return el.getAttribute(name)\n}\n\n/**\n * Get value of an attribute, reporting an error if it is missing or not\n * a number\n */\nfunction numericAttribute(\n    editor: DeserializingEditor,\n    el: Element,\n    name: string,\n    required: boolean = true,\n): number | null {\n    const repr = required\n        ? requireAttribute(editor, el, name)\n        : el.getAttribute(name)\n    if (repr == null) return null\n    const value = Number(repr)\n    if (Number.isNaN(value)) {\n        editor.reportError('invalid-attribute', {\n            namespace: el.namespaceURI,\n            localName: el.localName,\n            id: el.getAttribute('id'),\n            attNamespace: null,\n            attName: name,\n            error: 'not-a-number',\n        })\n        return null\n    }\n    return value\n}\n\n/**\n * Get value of an attribute, requiring it to be within a set of possible values\n */\nfunction setAttribute(\n    editor: DeserializingEditor,\n    el: Element,\n    name: string,\n    values: Set<string>,\n    required: boolean = true,\n): string | null {\n    const value = required\n        ? requireAttribute(editor, el, name)\n        : el.getAttribute(name)\n    if (value == null) return null\n    if (!values.has(value)) {\n        editor.reportError('invalid-attribute', {\n            namespace: el.namespaceURI,\n            localName: el.localName,\n            id: el.getAttribute('id'),\n            attNamespace: null,\n            attName: name,\n            error: 'invalid-value',\n            value,\n            expected: Array.from(values),\n        })\n        return null\n    }\n    return value\n}\n","// Copyright 2021 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { CALS, CNXML, Editing } from './cnxml'\nimport { Node } from './render'\n\nexport interface IntrinsicAttributes {\n    xmlns?: string\n    xmlLang?: string\n    children?: Node\n}\n\nexport interface IntrinsicElements {\n    'cite-title': IntrinsicAttributes & CNXML.Cite\n    'alt-text': IntrinsicAttributes & Editing.AltText\n    audio: IntrinsicAttributes & CNXML.Audio\n    caption: IntrinsicAttributes & CNXML.Caption\n    cite: IntrinsicAttributes & CNXML.Cite\n    code: IntrinsicAttributes & CNXML.Code\n    colspec: IntrinsicAttributes & CALS.Colspec\n    commentary: IntrinsicAttributes & CNXML.Commentary\n    content: IntrinsicAttributes & CNXML.Content\n    definition: IntrinsicAttributes & CNXML.Definition\n    document: IntrinsicAttributes & CNXML.Document\n    download: IntrinsicAttributes & CNXML.Download\n    emphasis: IntrinsicAttributes & CNXML.Emphasis\n    equation: IntrinsicAttributes & CNXML.Equation\n    example: IntrinsicAttributes & CNXML.Example\n    exercise: IntrinsicAttributes & CNXML.Exercise\n    figure: IntrinsicAttributes & CNXML.Figure\n    flash: IntrinsicAttributes & CNXML.Flash\n    footnote: IntrinsicAttributes & CNXML.Footnote\n    foreign: IntrinsicAttributes & CNXML.Foreign\n    glossary: IntrinsicAttributes & CNXML.Glossary\n    image: IntrinsicAttributes & CNXML.Image\n    item: IntrinsicAttributes & CNXML.Item\n    'java-applet': IntrinsicAttributes & CNXML.JavaApplet\n    entry: IntrinsicAttributes & CALS.Entry\n    label: IntrinsicAttributes & CNXML.Label\n    labview: IntrinsicAttributes & CNXML.Labview\n    link: IntrinsicAttributes & CNXML.Link\n    list: IntrinsicAttributes & CNXML.List\n    meaning: IntrinsicAttributes & CNXML.Meaning\n    media: IntrinsicAttributes & CNXML.Media\n    newline: IntrinsicAttributes & CNXML.Newline\n    note: IntrinsicAttributes & CNXML.Note\n    para: IntrinsicAttributes & CNXML.Para\n    param: IntrinsicAttributes & CNXML.Param\n    pi: IntrinsicAttributes & CNXML.ProcesingInstruction\n    preformat: IntrinsicAttributes & CNXML.Preformat\n    problem: IntrinsicAttributes & CNXML.Problem\n    proof: IntrinsicAttributes & CNXML.Proof\n    quote: IntrinsicAttributes & CNXML.Quote\n    row: IntrinsicAttributes & CALS.Row\n    rule: IntrinsicAttributes & CNXML.Rule\n    section: IntrinsicAttributes & CNXML.Section\n    seealso: IntrinsicAttributes & CNXML.SeeAlso\n    solution: IntrinsicAttributes & CNXML.Solution\n    space: IntrinsicAttributes & CNXML.Space\n    spanspec: IntrinsicAttributes & CALS.Spanspec\n    statement: IntrinsicAttributes & CNXML.Statement\n    sub: IntrinsicAttributes & CNXML.Sub\n    subfigure: IntrinsicAttributes & CNXML.Subfigure\n    summary: IntrinsicAttributes & Editing.Summary\n    sup: IntrinsicAttributes & CNXML.Sup\n    table: IntrinsicAttributes & CALS.Table\n    tbody: IntrinsicAttributes & CALS.Tbody\n    term: IntrinsicAttributes & CNXML.Term\n    tfoot: IntrinsicAttributes & CALS.Tfoot\n    tgroup: IntrinsicAttributes & CALS.Tgroup\n    thead: IntrinsicAttributes & CALS.Thead\n    title: IntrinsicAttributes & CNXML.Title\n    video: IntrinsicAttributes & CNXML.Video\n}\n","// Copyright 2021 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\nimport * as JSX from './jsx'\nimport { Element, Node } from './render'\n\nexport * as JSX from './jsx'\n\n/** Old-style JSX factory */\nexport function createElement<\n    K extends keyof JSX.IntrinsicElements,\n    A extends JSX.IntrinsicAttributes,\n>(\n    name: K,\n    attrs: A | null,\n    ...children: Node[]\n): Element {\n    const { xmlns, ...attributes } = attrs ?? {}\n\n    return {\n        name: { namespace: xmlns, local: name },\n        attributes,\n        children,\n    }\n}\n\n/** New-style JSX factory */\nexport function jsx<\n    K extends keyof JSX.IntrinsicElements,\n    A extends JSX.IntrinsicAttributes,\n>(name: K, props: A): Element {\n    const { xmlns, children, ...attributes } = props\n\n    return {\n        name: { namespace: xmlns, local: name },\n        attributes,\n        children: children ?? [],\n    }\n}\n\nexport const jsxs = jsx\n","// Copyright 2021 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\nimport { isPlainObject } from 'is-plain-object'\n\nimport * as JSX from './jsx'\nimport {\n    CMLNLE_NAMESPACE, CNXML_NAMESPACE, CXLXT_NAMESPACE, EDITING_NAMESPACE, XML_NAMESPACE,\n    XMLNS_NAMESPACE,\n} from './consts'\n\n/** Qualified name of an element or attribute */\nexport interface Name {\n    /**\n     * Namespace\n     *\n     * When omitted for an element name it is inherited form the parent element.\n     * When omitted for an attribute, the name refers to the default namespace.\n     */\n    namespace?: string\n    /** Local name */\n    local: string\n}\n\n/** An element */\nexport interface Element {\n    /** Element's name */\n    name: Name\n    /** Attributes set on this element */\n    attributes: Attributes\n    /** Children nodes */\n    children: Node\n}\n\nexport type Attributes = Omit<JSX.IntrinsicAttributes, 'children'> & { [key: string]: unknown }\n\n/** A processing instruction */\nexport interface ProcessingInstruction {\n    /** PI's target */\n    target: string\n    /** PI's value */\n    value: string\n}\n\n/** Any value that can be used as child of a JSX element */\nexport type Node = Element | ProcessingInstruction | globalThis.Node | string | Node[] | null\n\nexport const Node = {\n    isElement(node: Node): node is Element {\n        return isPlainObject(node) && typeof (node as Element).name === 'object'\n    },\n    isProcessingInstruction(node: Node): node is ProcessingInstruction {\n        return node != null && typeof (node as ProcessingInstruction).target === 'string'\n    },\n}\n\n/** Mapping from XML prefixes to namespace URIs */\nconst NAMESPACE_PREFIXES: { [prefix: string]: string } = {\n    xml: XML_NAMESPACE,\n    cmlnle: CMLNLE_NAMESPACE,\n    cxlxt: CXLXT_NAMESPACE,\n    editing: EDITING_NAMESPACE,\n}\n\ninterface Renderer {\n    namespace: string | null\n    doc: Document\n    depth: number\n}\n\n/** Render a JSX element into an XML document */\nexport function render(root: Element): Document {\n    const namespace = root.name.namespace\n    const doc = document.implementation.createDocument(\n        namespace ?? null, root.name.local, null)\n    const renderer = { namespace: namespace ?? null, doc, depth: 0 }\n\n    for (const [prefix, uri] of Object.entries(NAMESPACE_PREFIXES)) {\n        if (uri === XML_NAMESPACE) continue\n\n        doc.documentElement.setAttributeNS(XMLNS_NAMESPACE, `xmlns:${prefix}`, uri)\n    }\n\n    finishElement(renderer, root, doc.documentElement)\n\n    return doc\n}\n\n/** Render a JSX element into an XML element */\nfunction renderElement(renderer: Renderer, element: Element): globalThis.Element {\n    const ns = element.name.namespace ?? renderer.namespace\n    const el = renderer.doc.createElementNS(ns, element.name.local)\n\n    finishElement(renderer, element, el)\n\n    return el\n}\n\n/** CNXML tags which contain only block and can be safely formatted */\n/* eslint-disable array-element-newline */\nconst BLOCK_TAGS = [\n    'commentary', 'content', 'definition', 'document', 'example', 'exercise',\n    'figure', 'glossary', 'item', 'list', 'meaning', 'media', 'note', 'problem',\n    'proof', 'quote', 'rule', 'section', 'seealso', 'solution', 'statement',\n    'subfigure',\n]\n/* eslint-enable array-element-newline */\n\n/**\n * Attributes added for ex. when transforming from JSX to HTML.\n * We want to omit them.\n */\nconst RESERVED_ATTRIBUTES = [\n    '__self', // Value of this when evaluation the JSX expression\n    '__source', // Location of JSX expression in the source\n]\n\n/** Finish rendering an already created element */\nfunction finishElement(renderer: Renderer, element: Element, out: globalThis.Element): void {\n    for (const [key, value] of Object.entries(element.attributes)) {\n        if (RESERVED_ATTRIBUTES.includes(key)) continue\n        if (value == null) continue\n\n        let val\n\n        switch (typeof value) {\n        case 'string':\n            val = value\n            break\n\n        case 'object':\n        case 'boolean':\n        case 'number':\n        case 'bigint':\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\n            val = value.toString()\n            break\n\n        default:\n            continue\n        }\n\n        const r = key.match(/^([a-z]+)([A-Z][a-z-]*)$/)\n        if (r) {\n            const [, prefix, attr] = r\n            const ns = NAMESPACE_PREFIXES[prefix]\n\n            if (ns == null) {\n                throw new Error(\n                    `unknown namespace prefix ${prefix} for attribute ${key}`)\n            }\n\n            out.setAttributeNS(ns, attr.toLowerCase(), val.toString())\n        } else {\n            out.setAttribute(key, val.toString())\n        }\n    }\n\n    const depth = renderer.depth + 1\n    const indent = out.namespaceURI === CNXML_NAMESPACE && BLOCK_TAGS.includes(out.tagName)\n        ? '\\n' + '  '.repeat(depth)\n        : null\n    const r = {\n        ...renderer,\n        depth,\n        namespace: element.name.namespace ?? renderer.namespace,\n    }\n\n    let count = 0\n\n    function renderChild(child: Node): void {\n        if (child == null) return\n\n        if (Array.isArray(child)) {\n            for (const node of child) {\n                renderChild(node)\n            }\n            return\n        }\n\n        if (indent != null) {\n            out.append(indent)\n        }\n\n        if (child instanceof globalThis.Node) {\n            out.append(renderer.doc.importNode(child, true))\n        } else if (typeof child === 'string') {\n            if (child !== '') out.append(child)\n        } else if (Node.isProcessingInstruction(child)) {\n            out.append(document.createProcessingInstruction(child.target, child.value))\n        } else {\n            out.append(renderElement(r, child))\n        }\n\n        count += 1\n    }\n\n    renderChild(element.children)\n\n    if (count > 0 && indent != null) {\n        out.append('\\n' + '  '.repeat(renderer.depth))\n    }\n}\n","// Copyright 2020 OpenStax Poland\n// Licensed under the MIT license. See LICENSE file in the project root for\n// full license text.\n\n/* eslint-disable @typescript-eslint/no-unsafe-return -- JSX in this file\n    typechecks, but doesn't lint */\n\nimport {\n    Admonition, AltText, Audio, Caption, Code, Commentary, CrossReference,\n    Definition, DefinitionExample, DefinitionTerm, DocumentReference, Exercise,\n    Figure, Footnote, Foreign, Glossary, Image, Link, List, ListItem, Meaning,\n    Media, MediaData, NameTerm, NumberStyle, Paragraph, Preformat, Problem,\n    ProcessingInstruction, Proof, Quotation, Rule, RuleExample, Section, SeeAlso, Solution,\n    Statement, Table, TableCell, TableColumn, TableSummary, TableFooter, TableGroup, TableHeader,\n    TableRow, Term, Title, Video, WithClasses,\n} from 'cnx-designer'\nimport { Editor, Element, Node, Text } from 'slate'\n\nimport { CNXML_NAMESPACE, EDITING_NAMESPACE } from './consts'\nimport { CALS, CXLXT } from './cnxml'\nimport { render, Node as RenderNode } from './render'\nimport { uuid } from './util'\nimport { Document as Doc } from '.'\n\n/** Serialization options */\nexport interface Options<Format> {\n    /** Format to which to serialize */\n    format: Format\n    /** Function used to determine the MIME type of a media item */\n    mediaMime: MediaMimeFunction\n    /** Function used to serialize custom elements */\n    serializeElement?: PartialSerializer<Element, CommonAttrs>\n    /** Function used to serialize custom text */\n    serializeText?: PartialSerializer<Text>\n}\n\n/** Function used to determine the MIME type of a media item */\nexport type MediaMimeFunction = (media: MediaData) => string\n\n/**\n * Function used to serialize custom nodes\n *\n * If provided, the serialization routine will first consult this function. If\n * a non-null value is returned it will be used as node's serialization.\n * Otherwise serialization will proceed as if this function wasn't provided.\n *\n * The type parameter `N` specifies the type of node handled by this serializer,\n * `A` the attributes which the serializer should emit on the CNXML element.\n *\n * For element serializers (`serializeElement`) `N` is {@link Element} and `A`\n * is  {@link CommonAttrs}. `children` contains children of `node`, already\n * serialized.\n *\n * For text serializers (`serializeText`) `N` is {@link Text} and `A` is\n * an empty object. `children` is the text string, optionally wrapped in\n * elements as specified by text's formatting.\n */\nexport type PartialSerializer<N extends Node, A = Record<string, never>> =\n    (node: N, attrs: A, children: RenderNode, ctx: Context) => RenderNode\n\n\nexport default function serialize(\n    editor: Editor, document: Doc, options: Options<'xml'>): string\nexport default function serialize(\n    editor: Editor, document: Doc, options: Options<'dom'>): Document\n\n/** Serialize a document to CNXML */\nexport default function serialize(\n    editor: Editor,\n    doc: Doc,\n    options: Options<'xml' | 'dom'>,\n): string | Document {\n    const { format, mediaMime } = options\n    const context = {\n        mediaMime,\n        serializeElement: options.serializeElement,\n        serializeText: options.serializeText,\n    }\n\n    const content = doc.content.map(n => serializeElement(editor, n, context))\n    const glossary = Glossary.isGlossary(doc.content[doc.content.length - 1])\n        ? content.pop()!\n        : null\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const document = render(<document\n        xmlns={CNXML_NAMESPACE}\n        cnxml-version={doc.version}\n        id={doc.moduleId}\n        module-id={doc.moduleId}\n        xmlLang={doc.language}\n        class={doc.classes?.join(' ')}\n        >\n        <title>{doc.title}</title>\n        <content>\n            {content}\n        </content>\n        {glossary}\n    </document>)\n\n    if (format === 'dom') {\n        return document\n    }\n\n    let x = new XMLSerializer().serializeToString(document)\n\n    // Some browsers serialize XML without declaration.\n    if (!x.startsWith('<?xml')) {\n        x = `<?xml version=\"1.0\" encoding=\"${document.characterSet}\"?>\\n${x}`\n    }\n\n    return x\n}\n/* eslint-enable import/export */\n\n/** Serialization context */\nexport interface Context {\n    mediaMime: MediaMimeFunction\n    serializeElement?: PartialSerializer<Element, CommonAttrs>\n    serializeText?: PartialSerializer<Text>\n}\n\n/** Attributes common to all elements */\nexport interface CommonAttrs {\n    /** Element's ID */\n    id: string\n    /** CSS classes */\n    class?: string\n}\n\n/** Serialize a single node */\nfunction serializeElement(editor: Editor, node: Node, ctx: Context): RenderNode {\n    if (Text.isText(node)) {\n        let n: RenderNode = node.text\n\n        for (const style of STYLES) {\n            if (style in node) {\n                n = applyTextStyle(style, node[style] as string | boolean, n)\n            }\n        }\n\n        if (ctx.serializeText != null) {\n            n = ctx.serializeText(node, {}, n, ctx) ?? n\n        }\n\n        return n\n    }\n\n    const children = Editor.hasInlines(editor, node)\n        ? serializeLine(editor, node, ctx)\n        : node.children.map(n => serializeElement(editor, n, ctx))\n\n    const attributes: CommonAttrs = {\n        id: node.id as string || `UUID${uuid.v4()}`,\n    }\n\n    if (WithClasses.hasClasses(node)) {\n        attributes.class = node.classes.join(' ')\n    }\n\n    if (ctx.serializeElement != null) {\n        const n = ctx.serializeElement(node, attributes, children, ctx)\n        if (n != null) {\n            return n\n        }\n    }\n\n    for (const [test, serializer] of SERIALIZERS) {\n        if (test(node)) {\n            return serializer(node, attributes, children, ctx)\n        }\n    }\n\n    throw new Error(`no serializer defined for ${JSON.stringify(node)}`)\n}\n\n/** Check if a node contains only plain, unmarked text */\nfunction isPlainText(node: Node): boolean {\n    if (Element.isElement(node)) {\n        return node.children.every(isPlainText)\n    }\n\n    for (const key in node) {\n        if (key === 'text') continue\n        if (key === 'position' && node[key] === 'normal') continue\n\n        return false\n    }\n\n    return true\n}\n\n/** Name of a style attribute on a {@link StyledText} node */\ntype TextStyle = 'emphasis' | 'underline' | 'strong' | 'position'\n\nconst STYLES: TextStyle[] = ['emphasis', 'underline', 'strong', 'position']\n\n/** Map storing values of style attributes of a {@link StyledText} node */\ntype Style = Map<TextStyle, string | boolean>\n\n/** Apply a single text style to a rendered inline node or text */\nfunction applyTextStyle(style: TextStyle, value: string | boolean, node: RenderNode): RenderNode {\n    switch (style) {\n    case 'emphasis':\n        return value\n            ? <emphasis xmlns={CNXML_NAMESPACE} effect=\"italics\">{node}</emphasis>\n            : node\n\n    case 'strong':\n        return value\n            ? <emphasis xmlns={CNXML_NAMESPACE} effect=\"bold\">{node}</emphasis>\n            : node\n\n    case 'underline':\n        return value\n            ? <emphasis xmlns={CNXML_NAMESPACE} effect=\"underline\">{node}</emphasis>\n            : node\n\n    case 'position':\n        return value === 'superscript'\n            ? <sup xmlns={CNXML_NAMESPACE}>{node}</sup>\n            : value === 'subscript'\n                ? <sub xmlns={CNXML_NAMESPACE}>{node}</sub>\n                : node\n    }\n}\n\n/** Apply collection of text styles to a rendered inline node or text */\nfunction applyStyle(styles: Style, node: RenderNode): RenderNode {\n    for (const [style, value] of styles) {\n        node = applyTextStyle(style, value, node)\n    }\n\n    return node\n}\n\n/** Serialize a single line of text */\nfunction serializeLine(editor: Editor, node: Element, ctx: Context): RenderNode {\n    const out: RenderNode[] = []\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const text: [Style, RenderNode[]][] = [[new Map(), []]]\n\n    /** Flush all accumulated text into output */\n    function flush(): void {\n        while (text.length > 1) {\n            const [style, nodes] = text.pop()!\n            text[text.length - 1][1].push(applyStyle(style, nodes))\n        }\n\n        const [style, nodes] = text.pop()!\n        text.push([new Map(), []])\n\n        out.push(applyStyle(style, nodes))\n    }\n\n    /** Collapse style stack below certain depth */\n    function collapse(from: number): void {\n        for (let i = text.length - 1 ; i > from ; --i) {\n            const [style, nodes] = text[i]\n\n            if (nodes.length > 0) {\n                text[i - 1][1].push(applyStyle(style, nodes))\n                text[i][1] = []\n            }\n        }\n    }\n\n    /** Apply style to all future text */\n    function changeStyle(changed: Style): void {\n        const keep = new Set()\n\n        // Remove from changed any styles which are already present on\n        // the stack.\n        for (const [style] of text) {\n            for (const [name, value] of style) {\n                if (changed.has(name) && changed.get(name) === value) {\n                    changed.delete(name)\n                    keep.add(name)\n                }\n            }\n        }\n\n        // Then remove from the stack any unwanted styles.\n        for (let i = text.length - 1 ; i >= 0 ; --i) {\n            const [style] = text[i]\n\n            for (const [name, value] of style) {\n                // Since we want to keep each style in only one stack entry,\n                // this check is necessary to prevent styles we want to keep\n                // from being collapsed (as since they were removed from changed\n                // the next if would consider them unwanted).\n                if (keep.has(name)) continue\n\n                if (!changed.has(name) || changed.get(name) !== value) {\n                    collapse(i)\n                    text[i][1] = [applyTextStyle(name, value, text[i][1])]\n                    style.delete(name)\n                }\n            }\n\n            // If all styles at this depth were removed, drop this entry.\n            if (style.size === 0 && i > 0) {\n                collapse(i)\n                text[i - 1][1].push(...text[i][1])\n                text.splice(i, 1)\n            }\n        }\n\n        if (changed.size > 0) {\n            text.push([changed, []])\n        }\n    }\n\n    for (const child of node.children) {\n        if (!Text.isText(child)) {\n            flush()\n            out.push(serializeElement(editor, child, ctx))\n            continue\n        }\n\n        const style: Style = new Map()\n        for (const k of STYLES) {\n            if (k in child) {\n                style.set(k, child[k] as string | boolean)\n            }\n        }\n\n        // TODO: there should be a better way to check if a custom serializer\n        // wants to serialize a text node other than invoking it.\n        if (ctx.serializeText?.(child, {}, child.text, ctx) != null) {\n            flush()\n            out.push(ctx.serializeText(child, {}, applyStyle(style, child.text), ctx))\n            continue\n        }\n\n        changeStyle(style)\n        text[text.length - 1][1].push(child.text)\n    }\n\n    flush()\n    return out\n}\n\n/** Function serializing a node to a CNXML element */\ntype Serializer<T extends Node> =\n    (node: T, attrs: CommonAttrs, children: RenderNode, ctx: Context) => RenderNode\n\ntype SerializerEntry<T extends Node> = [(node: Node) => node is T, Serializer<T>]\n\n/**\n * Node serializers\n *\n * The first element of each entry is a node matcher, the second is a serializer\n * function. {@link serializeElement} will use serializer function of the first\n * entry whose matcher function returned true.\n */\nconst SERIALIZERS: SerializerEntry<Node>[] = [\n    [Admonition.isAdmonition, admonition],\n    [AltText.isAltText, altText],\n    [Audio.isAudio, mediaItem],\n    [Caption.isCaption, makeSerializer('caption')],\n    [Code.isCode, code],\n    [Commentary.isCommentary, makeSerializer('commentary')],\n    [CrossReference.isCrossReference, xref],\n    [Definition.isDefinition, makeSerializer('definition')],\n    [DefinitionExample.isDefinitionExample, makeSerializer('example')],\n    [DefinitionTerm.isDefinitionTerm, term],\n    [DocumentReference.isDocumentReference, docref],\n    [Exercise.isExercise, makeSerializer('exercise')],\n    [Figure.isFigure, figure],\n    [Footnote.isFootnote, makeSerializer('footnote')],\n    [Foreign.isForeign, foreign],\n    [Glossary.isGlossary, makeSerializer('glossary')],\n    [Image.isImage, mediaItem],\n    [Link.isLink, link],\n    [List.isList, list],\n    [ListItem.isListItem, makeSerializer('item')],\n    [Meaning.isMeaning, makeSerializer('meaning')],\n    [Media.isMedia, media],\n    [Paragraph.isParagraph, makeSerializer('para')],\n    [Preformat.isPreformat, makeSerializer('preformat')],\n    [ProcessingInstruction.isProcessingInstruction, processingInstruction],\n    [Problem.isProblem, makeSerializer('problem')],\n    [Proof.isProof, makeSerializer('proof')],\n    [Quotation.isQuotation, makeSerializer('quote')],\n    [Rule.isRule, rule],\n    [RuleExample.isRuleExample, makeSerializer('example')],\n    [Section.isSection, makeSerializer('section')],\n    [SeeAlso.isSeeAlso, makeSerializer('seealso')],\n    [Solution.isSolution, makeSerializer('solution')],\n    [Statement.isStatement, makeSerializer('statement')],\n    [Table.isCell, entry],\n    [Table.isFooter, tfoot],\n    [Table.isGroup, tgroup],\n    [Table.isHeader, thead],\n    [Table.isRow, row],\n    [Table.isSummary, tablesummary],\n    [Table.isTable, table],\n    [Term.isTerm, term],\n    [Title.isTitle, makeSerializer('title')],\n    [Video.isVideo, mediaItem],\n// XXX: what we'd like to do is type this array as\n// (<T extends Node> SerializerEntry<T>)[], but since such types aren't\n// currently supported we need this cast.\n] as SerializerEntry<Node>[]\n\n/** Create a serializer to a given tag from a given namespace */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction makeSerializer(Tag: string, namespace: string = CNXML_NAMESPACE) {\n    return function serializer(node: Node, attrs: CommonAttrs, children: RenderNode): RenderNode {\n        return <Tag xmlns={namespace} {...attrs}>{ children }</Tag>\n    }\n}\n\nfunction admonition(node: Admonition, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <note xmlns={CNXML_NAMESPACE} type={node.kind} {...attrs}>{children}</note>\n}\n\nfunction altText(node: AltText, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    // If alt-text contains only plain text it will be instead emitted in an\n    // alt attribute on a <media> element.\n    if (isPlainText(node)) {\n        return null\n    }\n\n    return <alt-text xmlns={EDITING_NAMESPACE} {...attrs}>{children}</alt-text>\n}\n\nfunction code(node: Element & Code, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <code\n        xmlns={CNXML_NAMESPACE}\n        display={node.placement === 'block' ? 'block' : undefined}\n        lang={node.language}\n        {...attrs}\n        >\n        {children}\n    </code>\n}\n\nfunction docref(node: DocumentReference, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <link\n        xmlns={CNXML_NAMESPACE}\n        document={node.document}\n        cmlnleCase={node.case}\n        {...attrs}\n        >\n        { children }\n    </link>\n}\n\nfunction figure(node: Figure, attrs: CommonAttrs, children: RenderNode[]): RenderNode {\n    function mapChild(child: RenderNode): RenderNode {\n        if (Array.isArray(child)) {\n            return child.map(mapChild)\n        }\n\n        if (!RenderNode.isElement(child)) {\n            return child\n        }\n\n        if (child.name.namespace === CNXML_NAMESPACE\n        && child.name.local === 'figure') {\n            return {\n                ...child,\n                name: {\n                    namespace: CNXML_NAMESPACE,\n                    local: 'subfigure',\n                },\n            }\n        }\n\n        return child\n    }\n\n    return <figure xmlns={CNXML_NAMESPACE} {...attrs}>\n        {mapChild(children)}\n    </figure>\n}\n\nfunction foreign(node: Foreign, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <foreign xmlns={CNXML_NAMESPACE} xmlLang={node.language} {...attrs}>\n        { children }\n    </foreign>\n}\n\nfunction link(node: Link, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <link xmlns={CNXML_NAMESPACE} url={node.url} {...attrs}>{ children }</link>\n}\n\nfunction list(node: List, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    function mapChild(child: RenderNode): RenderNode {\n        if (Array.isArray(child)) return child.map(mapChild)\n\n        if (!RenderNode.isElement(child)) {\n            return child\n        }\n\n        if ((child.name.namespace == null || child.name.namespace === CNXML_NAMESPACE)\n        && child.name.local === 'list') {\n            return <item xmlns={CNXML_NAMESPACE}>{child}</item>\n        }\n\n        return child\n    }\n\n    return <list\n        xmlns={CNXML_NAMESPACE}\n        list-type={node.style === 'enumerated' ? node.style : undefined}\n        bullet-style={(node.bullet !== 'bullet' ? node.bullet : undefined) as string}\n        number-style={(node.numberStyle !== 'arabic' ? node.numberStyle : undefined) as NumberStyle}\n        start-value={(node.start !== 1 ? node.start : undefined) as number}\n        {...attrs}\n        >\n        {mapChild(children)}\n    </list>\n}\n\nfunction media(node: Media, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    let alt: string\n\n    const altNode = node.children.find(n => AltText.isAltText(n))\n    if (altNode != null && isPlainText(altNode)) {\n        alt = Node.string(altNode)\n    }\n\n    return <media xmlns={CNXML_NAMESPACE} alt={alt!} {...attrs}>{children}</media>\n}\n\nfunction mediaItem(\n    node: Audio | Image | Video,\n    attrs: CommonAttrs,\n    children: RenderNode,\n    ctx: Context,\n): RenderNode {\n    const Tag = node.type.slice(6) as 'audio' | 'image' | 'video'\n\n    return <Tag\n        xmlns={CNXML_NAMESPACE}\n        src={node.src}\n        mime-type={ctx.mediaMime(node)}\n        for={node.intendedUse === 'all' ? undefined : node.intendedUse}\n        {...attrs}\n        >\n        {children}\n    </Tag>\n}\n\nfunction processingInstruction(node: ProcessingInstruction): RenderNode {\n    return { target: node.target, value: node.value }\n}\n\nfunction rule(node: Rule, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <rule\n        xmlns={CNXML_NAMESPACE}\n        type={node.kind === 'rule' ? undefined : node.kind}\n        {...attrs}>\n        {children}\n    </rule>\n}\n\nfunction term(node: Term | NameTerm, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    const nameIndexAttributes: CXLXT.Attributes.NameIndex = {}\n\n    if (Term.isNameTerm(node)) {\n        nameIndexAttributes.cxlxtName = node.name\n        nameIndexAttributes.cxlxtBorn = node.born\n        nameIndexAttributes.cxlxtDied = node.died\n    }\n\n    return <term\n        xmlns={CNXML_NAMESPACE}\n        cxlxtIndex={node.index}\n        cmlnleReference={node.reference}\n        {...nameIndexAttributes}\n        {...attrs}>\n        { children }\n    </term>\n}\n\nfunction xref(node: CrossReference, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <link\n        xmlns={CNXML_NAMESPACE}\n        target-id={node.target}\n        document={node.document ?? undefined}\n        cmlnleCase={node.case}\n        {...attrs}\n        >\n        {children}\n    </link>\n}\n\n/** --- CALS table ---------------------------------------------------------- */\n// TODO: don't serialize empty cells\n\nfunction table(node: Table, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    let summary\n\n    const summaryNode = node.children.find(Table.isSummary)\n    if (summaryNode != null && isPlainText(summaryNode)) {\n        summary = Node.string(summaryNode)\n    } else if (summaryNode == null) {\n        summary = \"\"\n    }\n\n    return <table\n        xmlns={CNXML_NAMESPACE}\n        summary={summary}\n        {...attrs}\n        >\n        {children}\n    </table>\n}\n\nfunction tablesummary(node: TableSummary, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    // If summary contains only plain text it will be instead emitted in\n    // a summary attribute on a <table> element.\n    if (isPlainText(node)) {\n        return null\n    }\n\n    return <summary xmlns={EDITING_NAMESPACE} {...attrs}>{children}</summary>\n}\n\nfunction tgroup(node: TableGroup, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    if (!Array.isArray(children)) throw new Error(\"invalid children of table_group\")\n\n    let thead = null\n    let tfoot = null\n    const tbody = []\n\n    for (const child of children) {\n        if (!RenderNode.isElement(child)) throw new Error(\"invalid child of table_group\")\n        switch (child.name.local) {\n        case 'thead': thead = child; break\n        case 'tfoot': tfoot = child; break\n        case 'row': tbody.push(child); break\n        default: throw new Error(\"invalid child of table_group\")\n        }\n    }\n\n    const spans = node.spans.map(span => <spanspec\n        xmlns={CNXML_NAMESPACE}\n        spanname={span.name}\n        namest={span.start}\n        nameend={span.end}\n    />)\n\n    return <tgroup\n        xmlns={CNXML_NAMESPACE}\n        cols={node.columns.length}\n        {...attrs}\n        >\n        {node.columns.map(colspec)}\n        {spans}\n        {thead}\n        {tfoot}\n        <tbody>\n            {tbody}\n        </tbody>\n    </tgroup>\n}\n\nfunction colspec(column: TableColumn, index: number): RenderNode {\n    // Skip columns with default values\n    if (column.name == null) return null\n\n    return <colspec\n        xmlns={CNXML_NAMESPACE}\n        colnum={index + 1}\n        colname={column.name}\n    />\n}\n\nfunction thead(node: TableHeader, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <thead\n        xmlns={CNXML_NAMESPACE}\n        {...attrs}\n        >\n        {node.columns?.map(colspec)}\n        {children}\n    </thead>\n}\n\nfunction tfoot(node: TableFooter, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <tfoot\n        xmlns={CNXML_NAMESPACE}\n        {...attrs}\n        >\n        {node.columns?.map(colspec)}\n        {children}\n    </tfoot>\n}\n\nfunction row(node: TableRow, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <row\n        xmlns={CNXML_NAMESPACE}\n        {...attrs}\n        >\n        {children}\n    </row>\n}\n\nfunction entry(node: TableCell, attrs: CommonAttrs, children: RenderNode): RenderNode {\n    return <entry\n        xmlns={CNXML_NAMESPACE}\n        {...cellPosition(node)}\n        {...attrs}\n        >\n        {children}\n    </entry>\n}\n\nfunction cellPosition(node: TableCell): CALS.Attributes.Span {\n    if (node.column == null) return {}\n\n    if ('column' in node.column) {\n        return { colname: node.column.column }\n    } else if ('start' in node.column) {\n        return { namest: node.column.start, nameend: node.column.end }\n    }\n    return { spanname: node.column.span }\n}\n"],"names":["isPlainText","Element","Node","Editor","Transforms","Text","Path","WithClasses","Slate","code","foreign","link","term","list","media","rule","table","mediaItem","List","MediaUse","tgroup","Table","isPlainObject","Glossary","_jsxs","_jsx","uuid.v4","Admonition","AltText","Audio","Caption","Code","Commentary","CrossReference","Definition","DefinitionExample","DefinitionTerm","DocumentReference","Exercise","Figure","Footnote","Foreign","Image","Link","ListItem","Meaning","Media","Paragraph","Preformat","ProcessingInstruction","Problem","Proof","Quotation","Rule","RuleExample","Section","SeeAlso","Solution","Statement","Term","Title","Video","RenderNode"],"mappings":"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"}